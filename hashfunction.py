import cryptofunctions as crf

#Хэш - необратима функция
#возведение в квадрат и ивлечение корня по молулю (криптосистема Рабина)

# данная ЛР строго говоря не реализует хэш-функцию, поскольку не соблюдается условие
# фиксированной длины и радикального различия хэшей малоразличающихся исходных текстов
# необходима доработка с использованием детерменированной генерации "мусора", заполн.
# оставшееся пространоство, например на базе числа пи или друг. беск. ирр. дроби

def rabin(x,n):
    """Функция Рабина - кандидат в односторонние функции
    На вход получаем число х и n=p*q, где p, q - простые"""
    y=(x**x)%n
    return y

def megahash(text,n):
    hash=[]
    """Посимвольная обработка исходного текста"""
    for i in range(len(text)):
        hash.append(rabin(text[i],n))
    return hash

def hashfunction():
    """Общая функция для получения хэша из текста
    Включает ввод, посимвольную обработку получение и вывод хэша
    Использует функцию cryptofunctions.text_crypt
    для кодирования текста из строки символов в строку чисел"""
    p=crf.inputprimecheck('Введите простое р: ','НЕ ЯВЛЯЕТСЯ простым, введите ПРОСТОЕ р: ')
    q=crf.inputprimecheck('Введите простое q: ','НЕ ЯВЛЯЕТСЯ простым, введите ПРОСТОЕ q: ')
    n=p*q

    text = crf.text_crypt(input('Введите текст для хэширования: '))
    hash = megahash(text, n)

    print(f'Получившийся хэш: {hash}')

def launch():
    a = 0
    i = 1
    print(' * * * ГЕНЕРАЦИЯ ХЭША ПО СОБСТВЕННОЙ ХЭШ-ФУНКЦИИ * * *\n * * *     (с использованием функции Рабина)     * * *')

    while a == 0:  # Цикл для зацикливания тестирования
        print(f'\n>>> ТЕСТ №{i}')
        hashfunction()  # получаем функцию, которую можно вызвать в 1 строчку без передачи аргументов на вход
        a = int(input('\nНажмите 0 для продолжения тестирования, любую другую цифру для выхода: '))
        i += 1
    input('\nКОНЕЦ ТЕСТИРОВАНИЯ\n\n* * * Press Enter to exit... * * *')
    crf.mainmenu()
